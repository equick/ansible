---
- hosts: loadbalancer
  become: true
  tasks:
    - name: verify nginx service
      service: name=nginx state=started

    - name: verify nginx is listening on port 80
      wait_for: port=80 timeout=1

- hosts: webserver
  become: true
  tasks:
    - name: verify apache2 service
      service: name=apache2 state=started

    - name: verify apache2 is listening on port 80
      wait_for: port=80 timeout=1

- hosts: database
  become: true
  tasks:
    - name: verify mysql service
      service: name=mysql state=started

    - name: verify mysql is listening on port 3306
      wait_for: host={{ ansible_eth0.ipv4.address }} port=3306 timeout=1

- hosts: control
  tasks:
    - name: verify end-to-end response
      uri: url=http://{{item}} return_content=yes
      with_items: "{{groups.loadbalancer}}"
      register: lb_index

    - fail: msg="index failed to return content"
      when: "'Hello, from sunny' not in item.content"
      with_items: "{{lb_index.results}}"

    - name: verify end-to-end db response
      uri: url=http://{{item}}/db return_content=yes
      with_items: "{{groups.loadbalancer}}"
      register: lb_db

    - fail: msg="db failed to return content"
      when: "'Database Connected from' not in item.content"
      with_items: "{{lb_db.results}}"

- hosts: loadbalancer
  vars:
      hello: "Hello, from sunny {{item.item}}!"
      dbmsg: "Database Connected from {{item.item}}!"
  tasks:
    - name: verify backend response
      uri: url=http://{{item}} return_content=yes
      with_items: "{{groups.webserver}}"
      register: app_index

    - fail: msg="index failed to return content"
      when: hello not in item.content
      with_items: "{{app_index.results}}"
     
    - name: verify backend db response
      uri: url=http://{{item}}/db return_content=yes
      with_items: "{{groups.webserver}}"
      register: app_db

    - fail: msg="db failed to return content"
      when: dbmsg not in item.content
      with_items: "{{app_db.results}}"
